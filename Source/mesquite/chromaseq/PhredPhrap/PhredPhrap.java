/* Mesquite chromaseq source code.  Copyright 2005-2009 D. Maddison and W. Maddison. Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code.  The commenting leaves much to be desired. Please approach this source code with the spirit of helping out. Perhaps with your help we can be more than a few, and make Mesquite better. Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY. Mesquite's web site is http://mesquiteproject.org This source code and its compiled class files are free and modifiable under the terms of  GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.chromaseq.PhredPhrap; import java.io.*;import java.util.*;import java.awt.*;import java.awt.event.*;import org.dom4j.*;import mesquite.lib.*;import mesquite.lib.duties.*;import mesquite.tol.lib.MesquiteXMLToLUtilities;import mesquite.categ.lib.*;import mesquite.cont.lib.*;import mesquite.meristic.lib.*;import mesquite.chromaseq.ChromaseqAuthorDefaults.ChromaseqAuthorDefaults;import mesquite.chromaseq.lib.*;/* ======================================================================== */public class PhredPhrap extends PhPhRunner implements ActionListener { 	/*primer database stuff */	private boolean primerAndSampleCodeInfoFromDatabase;	private String databaseURL = "";	private boolean uploadResultsToDatabase = false;	private ChromaseqAuthorDefaults authorDefaults;	NameParserManager nameParserManager;	String nameParsingRulesName="";	//String editNameParserButtonString = "Edit Naming Rules...";	ChromFileNameParsing nameParsingRule;	//Choice nameRulesChoice;	StringBuffer logBuffer;	ProgressIndicator progIndicator = null;	boolean importing = true;	String[][] fileNameTranslation;	//for importing sequences	//MesquiteProject project = null;	FileCoordinator coord = null;	MesquiteFile file = null;	Taxa taxa  = null;	DNAData data = null;	DNAData originalData = null;	ContinuousData  qualityData = null;//	CategoricalData addedBaseData = null;	MeristicData  registrationData = null;	MesquiteInteger maxChar = new MesquiteInteger(0);	static String previousDirectory = null;	int preDNANumberLength = 10;	final String processedFolder = "processed";	final String originalFolder = "originals";//	final String fastaFolder = "fasta";	final String processedACEFolder = "processedACE";	final String sequencesFolder = "sequences";	String fastaDirectory = null;	String processedFastaDirectory = null;	String processedACEDirectory = null;	boolean preferencesSet = false;	String phredParamPath; 	String phredPath;	String primerListPath;	String sampleCodeListPath;	String phrapOptions = "-qual_show 20 -vector_bound 0 ";	String phredOptions = "";	String fileExtension = ".ab1";	boolean requiresExtension=true;	boolean translateSampleCodes = true;	final static boolean runPhredPhrap = true;	boolean processPolymorphisms = true;	boolean verbose = true;	boolean singleTaxaBlock = false;	boolean addPhrapFailures = true;	boolean showBirdsEye = true;	double polyThreshold = 0.3;	ExtensibleDialog dialog = null;	SingleLineTextField primerListField = null;	SingleLineTextField dnaCodesField = null;	SingleLineTextField phredPathField =  null;	SingleLineTextField paramPathField = null;	int qualThresholdForTrim = 20;	int qualThresholdForLowerCase = 49;	boolean truncateMixedEnds = true;	int mixedEndWindow = 10;	int mixedEndThreshold = 5;	boolean renameContigsInAceFiles = true;	boolean addFragName = false;//	boolean openFastaDirectory = true;//	boolean openAceDirectory=false;//	boolean unTrimAceReads = true;	boolean backupOriginals = true;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName){		loadPreferences();		if (authorDefaults == null) {			authorDefaults = (ChromaseqAuthorDefaults)MesquiteTrunk.mesquiteTrunk.findEmployeeWithName("#ChromaseqAuthorDefaults");		}		if (nameParserManager == null)			nameParserManager= (NameParserManager)MesquiteTrunk.mesquiteTrunk.findEmployeeWithName("#ChromFileNameParsManager");		if (nameParserManager == null || authorDefaults == null) {			return false;		}		logBuffer = new StringBuffer(200);		return true;	}	public boolean doPhredPhrap(MesquiteProject project, boolean appendIfPossible) {		return doPhredPhrap(project, appendIfPossible,  null);	}	/*.................................................................................................................*/	public boolean doPhredPhrap(MesquiteProject project, boolean appendIfPossible,  String outputDirectory) {		importing = project !=null;		if (queryOptions()) {			// if they want to upload the results to the database, they need to ensure that			// they have selected their username			if (uploadResultsToDatabase) {				boolean results = authorDefaults.verifyAuthorIsntDefault();				if (!results) {					return false;				}			}			if (project != null)	project.incrementProjectWindowSuppression();			boolean success = prepareAndRunPhredPhrap(project, appendIfPossible,  outputDirectory);			if (project !=null) getProject().decrementProjectWindowSuppression();			return success;		}		return false;	}	/*.................................................................................................................*/	public void processSingleXMLPreference (String tag, String content) {		if ("requiresExtension".equalsIgnoreCase(tag))			requiresExtension = MesquiteBoolean.fromTrueFalseString(content);		else if ("phredParamPath".equalsIgnoreCase(tag))			phredParamPath = StringUtil.cleanXMLEscapeCharacters(content);		else if ("phredPath".equalsIgnoreCase(tag))			phredPath = StringUtil.cleanXMLEscapeCharacters(content);		else if ("primerListPath".equalsIgnoreCase(tag))			primerListPath = StringUtil.cleanXMLEscapeCharacters(content);		else if ("sampleCodeListPath".equalsIgnoreCase(tag))			sampleCodeListPath = StringUtil.cleanXMLEscapeCharacters(content);		else if ("previousDirectory".equalsIgnoreCase(tag))			previousDirectory = StringUtil.cleanXMLEscapeCharacters(content);		else if ("phrapOptions".equalsIgnoreCase(tag))			phrapOptions = StringUtil.cleanXMLEscapeCharacters(content);		else if ("fileExtension".equalsIgnoreCase(tag))			fileExtension = StringUtil.cleanXMLEscapeCharacters(content);		else if ("phredOptions".equalsIgnoreCase(tag))			phredOptions = StringUtil.cleanXMLEscapeCharacters(content);		else if ("nameParsingRulesName".equalsIgnoreCase(tag))			nameParsingRulesName = StringUtil.cleanXMLEscapeCharacters(content);		else if ("translateSampleCodes".equalsIgnoreCase(tag))			translateSampleCodes = MesquiteBoolean.fromTrueFalseString(content);		else if ("processPolymorphisms".equalsIgnoreCase(tag))			processPolymorphisms = MesquiteBoolean.fromTrueFalseString(content);		else if ("showBirdsEye".equalsIgnoreCase(tag))			showBirdsEye = MesquiteBoolean.fromTrueFalseString(content);		else if ("singleTaxaBlock".equalsIgnoreCase(tag))			singleTaxaBlock = MesquiteBoolean.fromTrueFalseString(content);		else if ("truncateMixedEnds".equalsIgnoreCase(tag))			truncateMixedEnds = MesquiteBoolean.fromTrueFalseString(content);		else if ("renameContigsInAceFiles".equalsIgnoreCase(tag))			renameContigsInAceFiles = MesquiteBoolean.fromTrueFalseString(content);		else if ("addFragName".equalsIgnoreCase(tag))			addFragName = MesquiteBoolean.fromTrueFalseString(content);		else if ("backupOriginals".equalsIgnoreCase(tag))			backupOriginals = MesquiteBoolean.fromTrueFalseString(content);		else if ("polyThreshold".equalsIgnoreCase(tag))			polyThreshold = MesquiteDouble.fromString(content);		else if ("qualThresholdForTrim".equalsIgnoreCase(tag))			qualThresholdForTrim = MesquiteInteger.fromString(content);		else if ("qualThresholdForLowerCase".equalsIgnoreCase(tag))			qualThresholdForLowerCase = MesquiteInteger.fromString(content);		else if ("mixedEndWindow".equalsIgnoreCase(tag))			mixedEndWindow = MesquiteInteger.fromString(content);		else if ("mixedEndThreshold".equalsIgnoreCase(tag))			mixedEndThreshold = MesquiteInteger.fromString(content);		else if ("databaseURL".equalsIgnoreCase(tag)) {			databaseURL = StringUtil.cleanXMLEscapeCharacters(content);		} else if ("primerAndSampleCodeInfoFromDatabase".equalsIgnoreCase(tag)) {			primerAndSampleCodeInfoFromDatabase = MesquiteBoolean.fromTrueFalseString(content);		} else if ("uploadResultsToDatabase".equalsIgnoreCase(tag)) {			uploadResultsToDatabase = MesquiteBoolean.fromTrueFalseString(content);		}		preferencesSet = true;	}	/*.................................................................................................................*/	public String preparePreferencesForXML () {		StringBuffer buffer = new StringBuffer(200);		StringUtil.appendXMLTag(buffer, 2, "requiresExtension", requiresExtension);  		StringUtil.appendXMLTag(buffer, 2, "translateSampleCodes", translateSampleCodes);  		StringUtil.appendXMLTag(buffer, 2, "phredParamPath", phredParamPath);  		StringUtil.appendXMLTag(buffer, 2, "phredPath", phredPath);  		StringUtil.appendXMLTag(buffer, 2, "primerListPath", primerListPath);  		StringUtil.appendXMLTag(buffer, 2, "sampleCodeListPath", sampleCodeListPath);  		StringUtil.appendXMLTag(buffer, 2, "processPolymorphisms", processPolymorphisms);  		StringUtil.appendXMLTag(buffer, 2, "polyThreshold", polyThreshold);  		StringUtil.appendXMLTag(buffer, 2, "previousDirectory", previousDirectory);  		StringUtil.appendXMLTag(buffer, 2, "singleTaxaBlock", singleTaxaBlock);  		StringUtil.appendXMLTag(buffer, 2, "qualThresholdForTrim", qualThresholdForTrim);  		StringUtil.appendXMLTag(buffer, 2, "qualThresholdForLowerCase", qualThresholdForLowerCase);  		StringUtil.appendXMLTag(buffer, 2, "mixedEndWindow", mixedEndWindow);  		StringUtil.appendXMLTag(buffer, 2, "mixedEndThreshold", mixedEndThreshold);  		StringUtil.appendXMLTag(buffer, 2, "truncateMixedEnds", truncateMixedEnds);  		StringUtil.appendXMLTag(buffer, 2, "renameContigsInAceFiles", renameContigsInAceFiles);  		StringUtil.appendXMLTag(buffer, 2, "addFragName", addFragName);  		StringUtil.appendXMLTag(buffer, 2, "backupOriginals", backupOriginals);  		StringUtil.appendXMLTag(buffer, 2, "phrapOptions", phrapOptions);  		StringUtil.appendXMLTag(buffer, 2, "fileExtension", fileExtension);  		StringUtil.appendXMLTag(buffer, 2, "phredOptions", phredOptions);  		StringUtil.appendXMLTag(buffer, 2, "nameParsingRulesName", nameParsingRulesName);  		StringUtil.appendXMLTag(buffer, 2, "showBirdsEye", showBirdsEye);  		StringUtil.appendXMLTag(buffer, 2, "databaseURL", databaseURL);		StringUtil.appendXMLTag(buffer, 2, "primerAndSampleCodeInfoFromDatabase", primerAndSampleCodeInfoFromDatabase);		StringUtil.appendXMLTag(buffer, 2, "uploadResultsToDatabase", uploadResultsToDatabase);				preferencesSet = true;		return buffer.toString();	}	/*.................................................................................................................*/	/** returns whether this module is requesting to appear as a primary choice */	public boolean requestPrimaryChoice(){		return true;  	}	/*.................................................................................................................*/	public boolean isPrerelease(){		return true;	}	/*.................................................................................................................*/	public boolean isSubstantive(){		return true;	}	/*.................................................................................................................*/	public boolean queryFileLocations() {		MesquiteInteger buttonPressed = new MesquiteInteger(1);		ExtensibleDialog queryFilesDialog = new ExtensibleDialog(MesquiteTrunk.mesquiteTrunk.containerOfModule(), "Phred Phrap Locations & Options",buttonPressed);  //MesquiteTrunk.mesquiteTrunk.containerOfModule()		queryFilesDialog.addLabel("Phred Phrap - File Locations & Options");		phredPathField = queryFilesDialog.addTextField("Phred, Phrap, & Phd2Fasta path:", phredPath, 40);		Button phredBrowseButton = queryFilesDialog.addAListenedButton("Browse...",null, this);		phredBrowseButton.setActionCommand("phBrowse");		paramPathField = queryFilesDialog.addTextField("Phred parameter file:", phredParamPath, 40);		Button paramBrowseButton = queryFilesDialog.addAListenedButton("Browse...",null, this);		paramBrowseButton.setActionCommand("paramBrowse");		SingleLineTextField phredOptionsField = queryFilesDialog.addTextField("Phred options:", phredOptions, 26, true);		SingleLineTextField phrapOptionsField = queryFilesDialog.addTextField("Phrap options:", phrapOptions, 26, true);		queryFilesDialog.completeAndShowDialog(true);		if (buttonPressed.getValue()==0)  {			phredParamPath = paramPathField.getText();			phredPath = phredPathField.getText();			phrapOptions = phrapOptionsField.getText();			phredOptions = phredOptionsField.getText();		}		queryFilesDialog.dispose();		return (buttonPressed.getValue()==0);	}	/*.................................................................................................................*/	public boolean queryPostOptions() {		MesquiteInteger buttonPressed = new MesquiteInteger(1);		ExtensibleDialog queryPostDialog = new ExtensibleDialog(MesquiteTrunk.mesquiteTrunk.containerOfModule(), "Post-Phrap Options",buttonPressed);  //MesquiteTrunk.mesquiteTrunk.containerOfModule()		queryPostDialog.addLabel("Post-Phrap Processing by Mesquite");		IntegerField lowerCaseQualityField = queryPostDialog.addIntegerField("Quality threshold for lower case:", qualThresholdForLowerCase, 3);		Checkbox polyBox = queryPostDialog.addCheckBox("Convert multiple-peaks sites to ambiguity codes",processPolymorphisms);		DoubleField polyThresholdField = queryPostDialog.addDoubleField("Minimum secondary peak fraction for ambiguity:", polyThreshold, 6);		Checkbox truncateEndsBox = queryPostDialog.addCheckBox("Trim low quality regions from ends (FASTA & import)",truncateMixedEnds);		IntegerField trimQualityField = queryPostDialog.addIntegerField("Quality threshold for trim:", qualThresholdForTrim, 3);		IntegerField trimWindowField = queryPostDialog.addIntegerField("Trim window length:", mixedEndWindow, 3);		IntegerField trimThresholdField = queryPostDialog.addIntegerField("Trim window threshold:", mixedEndThreshold, 3);//		Checkbox unTrimAceReadsField = queryPostDialog.addCheckBox("reset quality regions in reads in .ace files",unTrimAceReads);		Checkbox renameContigsField = queryPostDialog.addCheckBox("rename contigs in .ace files",renameContigsInAceFiles);		Checkbox addFragNameField = queryPostDialog.addCheckBox("add fragment name to contig name",addFragName);		queryPostDialog.addHorizontalLine(2);//		Checkbox openAceField = queryPostDialog.addCheckBox("open directory with .ace file links",openAceDirectory);//		Checkbox importSequencesField = queryPostDialog.addCheckBox("import sequences into Mesquite",importSequencesIntoMesquite);		Checkbox showBirdsEyeBox=null;		if (importing) {			showBirdsEyeBox = queryPostDialog.addCheckBox("display matrix in bird's eye view",showBirdsEye);		}		String s = "After Phrap finishes assembling contigs, Mesquite will process the files produced.  It will change upper case nucleotides to lower case if the quality score falls below the specified quality threshold.\n\n";		s+= "Mesquite will also trim low quality ends of sequences, if you so choose.  This trimming is done by removing regions of leading or trailing nucleotides with quality values less than the specified quality threshold. ";		s+= "If the ends have a mixture of lower and higher quality nucleotides, then Mesquite will trim until if finds a window of nucleotides of specified length which have fewer than the \"Trim window threshold\" ";		s+= "of nucleotides below the quality score.  To put it another way, it will trim leading and trailing windows of nucleotides which have as many or more poor-quality nucleotides than specified; ";		s+= "it trims high-quality nucleotides only if they are external to low-quality nucleotides that are to be trimmed by this criterion.";		queryPostDialog.appendToHelpString(s);		queryPostDialog.completeAndShowDialog(true);		if (buttonPressed.getValue()==0)  {			qualThresholdForLowerCase = lowerCaseQualityField.getValue();			truncateMixedEnds = truncateEndsBox.getState();			qualThresholdForTrim = trimQualityField.getValue();			processPolymorphisms = polyBox.getState();			polyThreshold = polyThresholdField.getValue();			mixedEndWindow = trimWindowField.getValue();			mixedEndThreshold = trimThresholdField.getValue();			renameContigsInAceFiles = renameContigsField.getState();//			unTrimAceReads = unTrimAceReadsField.getState();			addFragName = addFragNameField.getState();//			openAceDirectory = openAceField.getState();//			importSequencesIntoMesquite = importSequencesField.getState();			if (importing) {				showBirdsEye = showBirdsEyeBox.getState();			}		}		queryPostDialog.dispose();		return (buttonPressed.getValue()==0);	}	/*.................................................................................................................*/	public boolean queryOptions() {		if (nameParserManager == null)			return false;		MesquiteInteger buttonPressed = new MesquiteInteger(ChromFileNameDialog.CANCEL);		ChromFileNameDialog dialog = new ChromFileNameDialog(MesquiteTrunk.mesquiteTrunk.containerOfModule(), 				"Run Phred Phrap Options", buttonPressed, nameParserManager, nameParsingRulesName);				dnaCodesField = dialog.addTextField("Codes & names file:", sampleCodeListPath,26);		final Button dnaCodesBrowseButton = dialog.addAListenedButton("Browse...",null, this);		dnaCodesBrowseButton.setActionCommand("DNANumbersBrowse");		Checkbox translateCodesBox = dialog.addCheckBox("translate sample codes using name file", translateSampleCodes);		primerListField = dialog.addTextField("Primer list file:", primerListPath,26);		final Button primerBrowseButton = dialog.addAListenedButton("Browse...",null, this);		primerBrowseButton.setActionCommand("primerBrowse");		Checkbox requiresExtensionBox = dialog.addCheckBox("only process files with standard extensions (ab1,abi,ab,CRO,scf)", requiresExtension);		SingleLineTextField fileExtensionField = dialog.addTextField("file extension for chromatogram copies:", fileExtension, 8, true);		dialog.addHorizontalLine(2);		Checkbox useDatabaseBox = dialog.addCheckBox("primer and sample code info from database", primerAndSampleCodeInfoFromDatabase);		Checkbox uploadResultsBox = dialog.addCheckBox("upload results to database", uploadResultsToDatabase); 		final SingleLineTextField databaseURLField = dialog.addTextField("Database URL:", databaseURL, 26, true);				dialog.addHorizontalLine(2);		useDatabaseBox.addItemListener(new ItemListener() {			public void itemStateChanged(ItemEvent event) {				boolean useDb = event.getStateChange() == ItemEvent.SELECTED; 				databaseURLField.setEnabled(useDb);				dnaCodesBrowseButton.setEnabled(!useDb);				dnaCodesField.setEnabled(!useDb);				primerBrowseButton.setEnabled(!useDb);				primerListField.setEnabled(!useDb);			}		});		if (primerAndSampleCodeInfoFromDatabase) {			useDatabaseBox.setState(true);			databaseURLField.setEnabled(primerAndSampleCodeInfoFromDatabase);			dnaCodesBrowseButton.setEnabled(!primerAndSampleCodeInfoFromDatabase);			dnaCodesField.setEnabled(!primerAndSampleCodeInfoFromDatabase);			primerBrowseButton.setEnabled(!primerAndSampleCodeInfoFromDatabase);			primerListField.setEnabled(!primerAndSampleCodeInfoFromDatabase);					}		Panel buttonPanel = dialog.addNewDialogPanel();		Button fileLocationsButton = dialog.addAButton("Phred Phrap Locations & Options...",buttonPanel);		fileLocationsButton.addActionListener(this);		fileLocationsButton.setActionCommand("phLocations");		Checkbox backupOriginalsBox = dialog.addCheckBox("save backups of original chromatograms", backupOriginals);		Panel buttonPanel2 = dialog.addNewDialogPanel();		Button postProcessingButton = dialog.addAButton("Post-Phrap Options...",buttonPanel2);		postProcessingButton.addActionListener(this);		postProcessingButton.setActionCommand("postOptions");		Checkbox singleTaxaBlockBox=null;		if (importing) {			singleTaxaBlockBox = dialog.addCheckBox("import as single taxon block",singleTaxaBlock);		}		String s = "Mesquite searches within the name of each chromatogram file for both a code indicating the sample (e.g., a voucher number) and the primer name. ";		s+= "To allow this, you must first define an rule that defines how the chromatogram file names are structured.\n\n";		s+= "If you so choose, Mesquite will search for the sample code within a sample names file you select, on each line of which is:\n";		s+= "   <code><tab><short sample name><tab><long sample name>;\n";		s+= "where the code, short sample name, and long sample name are all single tokens (you can force a multi-word name to be a single token by surrounding the name with single quotes). ";		s+= "The short sample name is for the file names, and must be <27 characters; the long sample name is the name you wish to have within the FASTA file.\n\n";		dialog.appendToHelpString(s);		dialog.completeAndShowDialog(true);		boolean success=(buttonPressed.getValue()== ChromFileNameDialog.OK);		if (success)  {			nameParsingRule = dialog.getNameParsingRule();			nameParsingRulesName = nameParsingRule.getName();			fileExtension = fileExtensionField.getText();			requiresExtension = requiresExtensionBox.getState();			translateSampleCodes = translateCodesBox.getState();//			runPhredPhrap = runPhredPhrapBox.getState();			backupOriginals = backupOriginalsBox.getState();			primerListPath = primerListField.getText();			sampleCodeListPath = dnaCodesField.getText();			primerAndSampleCodeInfoFromDatabase = useDatabaseBox.getState();			uploadResultsToDatabase = uploadResultsBox.getState();			if (uploadResultsToDatabase) {				databaseURL = databaseURLField.getText();			}			if (!StringUtil.blank(databaseURL)) {				//mesquite.lib.MesquiteXMLUtilities.setDatabaseURL(databaseURL);			}			if (importing) {				singleTaxaBlock = singleTaxaBlockBox.getState();			}		}		storePreferences();  // do this here even if Cancel pressed as the File Locations subdialog box might have been used		dialog.dispose();		return success;	}	/*.................................................................................................................*/	boolean makeDirectoriesForFragment(String fragmentDirPath){		File newDir = new File(fragmentDirPath);		try { newDir.mkdir();    //make folder for this gene					processedFastaDirectory = fragmentDirPath  + MesquiteFile.fileSeparator + ChromaseqUtil.processedFastaFolder;		newDir = new File(processedFastaDirectory);		newDir.mkdir();	//make processed fastaFolder		String sequencesDirectory = fragmentDirPath  + MesquiteFile.fileSeparator + sequencesFolder;		newDir = new File(sequencesDirectory);		newDir.mkdir();	//make sequences folder for holding all of the sequences and files produces by phred and phrap		}		catch (SecurityException e) { 			logln("Couldn't make directory.");			return false;		}		return true;	}	/*.................................................................................................................*/	public void echoStringToFile(String s, StringBuffer sb){		logln(s);		sb.append(s +  StringUtil.lineEnding());   		}	/*.................................................................................................................*/	String getPhredCommand(){		if (MesquiteTrunk.isWindows())			return StringUtil.protectForWindows(phredPath + "phred.exe");		else			return StringUtil.protectForUnix(phredPath + "phred");	}	/*.................................................................................................................*/	String getPhrapCommand(){		if (MesquiteTrunk.isWindows())			return StringUtil.protectForWindows(phredPath + "phrap.exe");		else			return StringUtil.protectForUnix(phredPath + "phrap");	}	/*.................................................................................................................*/	String getPhd2FastaCommand(){		if (MesquiteTrunk.isWindows())			return StringUtil.protectForWindows(phredPath + "phd2fasta.exe");		else			return StringUtil.protectForUnix(phredPath + "phd2fasta");	}	int sequenceCount = 0;	String importedDirectoryPath, importedDirectoryName;	public boolean prepareAndRunPhredPhrap(MesquiteProject project, boolean appendIfPossible){		return prepareAndRunPhredPhrap(project, appendIfPossible,  null);	}	/*.................................................................................................................*/	public boolean queryForPaths(MesquiteBoolean pleaseStorePrefs) {		if (!preferencesSet || StringUtil.blank(phredPath)) {			phredPath = MesquiteFile.chooseDirectory("Choose directory containing phred, phrap, and phd2fasta: ");			if (StringUtil.blank(phredPath))				return false;			if (!phredPath.endsWith(MesquiteFile.fileSeparator))				phredPath+=MesquiteFile.fileSeparator;			if (pleaseStorePrefs!=null)				pleaseStorePrefs.setValue(true);		}		if (!preferencesSet || StringUtil.blank(phredParamPath)) {			MesquiteString paramDir = new MesquiteString();			MesquiteString paramFile = new MesquiteString();			phredParamPath = MesquiteFile.openFileDialog("Choose phred parameter file: ", paramDir, paramFile);			if (StringUtil.blank(phredParamPath))				return false;			if (pleaseStorePrefs!=null)				pleaseStorePrefs.setValue(true);		}		if (!preferencesSet || StringUtil.blank(primerListPath) && !primerAndSampleCodeInfoFromDatabase) {			MesquiteString primerListDir = new MesquiteString();			MesquiteString primerListFile = new MesquiteString();			primerListPath = MesquiteFile.openFileDialog("Choose file containing primer list", primerListDir, primerListFile);			if (StringUtil.blank(primerListPath))				return false;			if (pleaseStorePrefs!=null)				pleaseStorePrefs.setValue(true);		}		if ((!preferencesSet || StringUtil.blank(sampleCodeListPath)) && translateSampleCodes && !primerAndSampleCodeInfoFromDatabase) {			MesquiteString dnaNumberListDir = new MesquiteString();			MesquiteString dnaNumberListFile = new MesquiteString();			sampleCodeListPath = MesquiteFile.openFileDialog("Choose file containing sample codes and names", dnaNumberListDir, dnaNumberListFile);			if (StringUtil.blank(sampleCodeListPath))				return false;			if (pleaseStorePrefs!=null)				pleaseStorePrefs.setValue(true);		}		return true;	}	/*.................................................................................................................*/	public void prepareShellScriptForDirectory(StringBuffer shellScript, StringBuffer postShellScript, String statusFilePath, String fragmentDirPath, String seqName, String directoryPath){		shellScript.append(ShellScriptUtil.getChangeDirectoryCommand(directoryPath));		shellScript.append(getPhredCommand() + " -id . -pd . -d " + StringUtil.blankIfNull(phredOptions) + " \n");		if (runPhredPhrap)			shellScript.append(ShellScriptUtil.getWriteStringAsFile(statusFilePath, "" + sequenceCount + ". " + seqName + " (Phred)"));		shellScript.append(getPhd2FastaCommand() + " -id . -os '" + seqName + "' -oq '" + seqName + ".qual'\n");		shellScript.append(getPhrapCommand() + " '" + seqName  + "' -new_ace " + StringUtil.blankIfNull(phrapOptions) + " \n");		if (runPhredPhrap)			shellScript.append(ShellScriptUtil.getWriteStringAsFile(statusFilePath, "" + sequenceCount + ". " + seqName + " (Phrap)"));		shellScript.append(ShellScriptUtil.getSetFileTypeCommand(directoryPath + MesquiteFile.fileSeparator + "" + seqName + ".ace"));		//postShellScript.append(getSetFileTypeCommand(sequenceDirPath + MesquiteFile.fileSeparator + "" + seqName + processedACESuffix + ".ace"));	}		/*.................................................................................................................*/	public PrimerList getPrimers(){		String primerList = "";		PrimerList primers = null;		if (!StringUtil.blank(primerListPath) && !primerAndSampleCodeInfoFromDatabase) {			primerList = MesquiteFile.getFileContentsAsString(primerListPath);							if ( !StringUtil.blank(primerList)) {				primers = new PrimerList(primerList);			}		}		else if (primerAndSampleCodeInfoFromDatabase){   // && !StringUtil.blank(databaseURL)) {			checkDatabaseSource();			if (databaseURLSource!=null) {				primers = new PrimerList(true, databaseURLSource);			}		}		return primers;	}	/*.................................................................................................................*/	public String getAnalysisParameters() {		StringBuffer sb = new StringBuffer();		sb.append("Phred Options: " + " -id . -pd . -d " + StringUtil.blankIfNull(phredOptions) + "\n");		sb.append("Phrap Options: " + " -new_ace " + StringUtil.blankIfNull(phrapOptions) + "\n");		sb.append("Chromaseq Options: \n");		sb.append("    Quality threshold for lower case: " + qualThresholdForLowerCase + "\n");		sb.append("    Convert multiple-peaks sites to ambiguity codes: " + processPolymorphisms + "\n");		sb.append("    Minimum secondary peak fraction for ambiguity: " + polyThreshold + "\n");		sb.append("    Trim low quality regions from ends: " + truncateMixedEnds + "\n");		sb.append("    Quality threshold for trim: " + qualThresholdForTrim + "\n");		sb.append("    Trim window length: " + mixedEndWindow + "\n");		sb.append("    Trim window threshold: " + mixedEndThreshold + "\n");				return sb.toString();	}	/*.................................................................................................................*/	public boolean prepareAndRunPhredPhrap(MesquiteProject project, boolean appendIfPossible,  String directoryPath){		MesquiteBoolean pleaseStorePrefs = new MesquiteBoolean(false);		if (!queryForPaths(pleaseStorePrefs))			return false;		if (pleaseStorePrefs.getValue())			storePreferences();	// ============  getting primer info  ===========		PrimerList primers = getPrimers();		if (primers==null) {			MesquiteMessage.warnUser("Primer information could not be obtained.");						return false;		}				// if not passed-in, then ask		if (StringUtil.blank(directoryPath)) {			directoryPath = MesquiteFile.chooseDirectory("Choose directory containing ABI files:", previousDirectory); //MesquiteFile.saveFileAsDialog("Base name for files (files will be named <name>1.nex, <name>2.nex, etc.)", baseName);		}		if (StringUtil.blank(directoryPath))			return false;		File directory = new File(directoryPath);		importedDirectoryPath = directoryPath + MesquiteFile.fileSeparator;		importedDirectoryName = directory.getName();		previousDirectory = directory.getParent();		storePreferences();		if (directory.exists() && directory.isDirectory()) {			logBuffer.setLength(0);			progIndicator = new ProgressIndicator(getProject(),"Preparing for Phred/Phrap");			progIndicator.setStopButtonName("Stop");			progIndicator.start();			boolean abort = false;			/*			Thread mt = Thread.currentThread();			 boolean piMine = false;			 if (mt instanceof MesquiteThread) 			 progIndicator = ((MesquiteThread)mt).getProgressIndicator();			 if (progIndicator ==null) {			 progIndicator = new ProgressIndicator(getProject(),"Running Phred & Phrap", 0);			 piMine = true;			 if (mt instanceof MesquiteThread)			 ((MesquiteThread)mt).setProgressIndicator(progIndicator);			 }			 progIndicator.setButtonMode(ProgressIndicator.FLAG_AND_HIDE);			 progIndicator.start();			 boolean abort = false;			 */			String sampleCodeList = "";			Parser sampleCodeListParser = null;			boolean haveNameList = false;			Document namesDoc = null;			boolean namesInXml = false;			if (!StringUtil.blank(sampleCodeListPath) && translateSampleCodes) {				sampleCodeList = MesquiteFile.getFileContentsAsString(sampleCodeListPath);				if (!StringUtil.blank(sampleCodeList)) {					// check to see if xml					namesDoc = XMLUtil.getDocumentFromString("samplecodes", sampleCodeList);					/*					 * 					if (namesInXml) {						// check root element						String rootElementName = namesDoc.getRootElement().getName();						if (!rootElementName.equals("samplecodes")) {							// bad root, warn user							MesquiteMessage.warnUser("Sample codes xml file has a bad format.  Ignoring.");							namesInXml = false;						}					}					 */					sampleCodeListParser = new Parser(sampleCodeList);					haveNameList = true;				}			}						String cPath;			String seqName;			String fullSeqName;			String fragName = "";			StringBuffer shellScript = new StringBuffer(6000);			StringBuffer postShellScript = new StringBuffer(6000);			sequenceCount = 0;			if (MesquiteTrunk.isWindows())  {				addWindowsHeader(shellScript);			} else {//				shellScript.append("setenv PHRED_PARAMETER_FILE "+StringUtil.protectForUnix(phredParamPath)+"\n");				shellScript.append("#!/bin/csh  -v\nsetenv PHRED_PARAMETER_FILE "+StringUtil.protectForUnix(phredParamPath)+"\n");			}			//	shellScript.append(getAliasCommand ("phred",  phredPath + "phred"));			//	shellScript.append(getAliasCommand ("phd2fasta",phredPath+"phd2fasta"));			//	shellScript.append(getAliasCommand ("phrap",phredPath+"phrap"));			//set path = ( $path /usr/bin /usr/sbin /phredPhrap/ph/)			int loc = 0;			String[] files = directory.list();			StringBuffer renameBuffer = new StringBuffer(1000);			String processedDirPath = directoryPath + MesquiteFile.fileSeparator + processedFolder;  // directory into which processed files go			String originalsDirPath = directoryPath + MesquiteFile.fileSeparator + originalFolder;  // directory for copies of original files			echoStringToFile("\nPhred Phrap processing of chromatograms as scripted by Mesquite", logBuffer);			echoStringToFile(" Processing directory: ", logBuffer);			echoStringToFile("  "+directoryPath+"\n", logBuffer);			echoStringToFile("Using names and codes file: " +sampleCodeListPath+"\n", logBuffer);			echoStringToFile("Using primers file: " + primerListPath+"\n", logBuffer);			echoStringToFile("Parameters: " + getAnalysisParameters()+"\n", logBuffer);			String rootDir = processedDirPath;			String fragmentDirPath = "";			File newDir;			int numPrepared = 0;			shellScript.append(ShellScriptUtil.getChangeDirectoryCommand(rootDir));			newDir = new File(processedDirPath);			try { 				newDir.mkdir();				if (backupOriginals) {					newDir = new File(originalsDirPath);					newDir.mkdir(); 				}			}			catch (SecurityException e) {				logln("Couldn't make directory.");				if (progIndicator!=null) progIndicator.goAway();				return false;			}			String runningFilePath = rootDir + MesquiteFile.fileSeparator + "running";			String contigPropertiesFilePath = rootDir + MesquiteFile.fileSeparator + "contigProperties.txt";			String statusFilePath = rootDir + MesquiteFile.fileSeparator + "status";			if (runPhredPhrap)				MesquiteFile.putFileContents(runningFilePath, "Phred Phrap are running...", true);			fileNameTranslation= new String[5][files.length];	//		ChromaseqInfoFile infoFile = null;			Element sampleElement = null;			Vector infoFiles = new Vector();			for (int i=0; i<files.length; i++) {				progIndicator.spin();				if (progIndicator.isAborted())					abort = true;				if (abort)					break;				fragName = "";				if (files[i]==null )					;				else {					cPath = directoryPath + MesquiteFile.fileSeparator + files[i];					File cFile = new File(cPath);					if (cFile.exists() && !cFile.isDirectory() && (!files[i].startsWith(".")) && (!requiresExtension || (files[i].endsWith("ab1") ||  files[i].endsWith(".abi")  || files[i].endsWith(".ab")  ||  files[i].endsWith(".CRO") || files[i].endsWith(".scf")))) {						String chromFileName = cFile.getName();						if (StringUtil.blank(chromFileName)) {							echoStringToFile("Bad file name; it is blank.", logBuffer);							// remove "running"							if (progIndicator!=null) progIndicator.goAway();							return false;						}						MesquiteString sampleCodeSuffix = new MesquiteString();						MesquiteString sampleCode = new MesquiteString();						MesquiteString primerName = new MesquiteString();						MesquiteString startTokenResult = new MesquiteString();						//here's where the names parser processes the name						if (nameParsingRule!=null) {							if (!nameParsingRule.parseFileName(this, chromFileName, sampleCode, sampleCodeSuffix, primerName, logBuffer, startTokenResult))								continue;						}						else {							echoStringToFile("Naming parsing rule is absent.", logBuffer);							return false;						}						if (startTokenResult.getValue() == null)							startTokenResult.setValue("");						MesquiteString stLouisString = new MesquiteString("");						if (primers != null)							fragName = primers.getFragmentName(primerName.getValue(),stLouisString);						if (!StringUtil.blank(sampleCode.getValue())) {							/* Translate code number to sample name if requested  */							if (primerAndSampleCodeInfoFromDatabase) {								// get the value of the sample code, if it starts								// with DNA, then it's a straight Extraction code,								// otherwise if it starts with BP, then it's								// a btol pcr reaction id, which looks up an extraction code								checkDatabaseSource();								String[] results = new DatabaseSampleCodeSource().getSequenceNamesFromCode(databaseURLSource, startTokenResult.getValue(), sampleCode.getValue());								seqName = results[0];								fullSeqName = results[1];							} else if (haveNameList && translateSampleCodes) {								if (namesInXml) {									String[] results = SampleCodeProvider.getSeqNamesFromXml(sampleCode, namesDoc);									seqName = results[0];									fullSeqName = results[1];								} else {									String[] results = SampleCodeProvider.getSeqNamesFromTabDelimitedFile(sampleCode, sampleCodeListParser);									seqName = results[0];									fullSeqName = results[1];								}							}							else {								seqName = sampleCode.getValue();								fullSeqName = sampleCode.getValue();							}						}						else {							seqName = chromFileName.substring(1, 10); // change!							fullSeqName = seqName;						}						seqName = StringUtil.cleanseStringOfFancyChars(seqName + sampleCodeSuffix.getValue());  // tack on suffix						fullSeqName = StringUtil.cleanseStringOfFancyChars(fullSeqName + sampleCodeSuffix.getValue());						progIndicator.spin();						fragmentDirPath = processedDirPath;						if (StringUtil.blank(fragName)) {							echoStringToFile("  Primer not found: " + primerName, logBuffer);  // so stop processing this one							echoStringToFile("   " + chromFileName + " not processed", logBuffer);						}						else {								fragmentDirPath = StringUtil.cleansePath(directoryPath + MesquiteFile.fileSeparator + processedFolder + MesquiteFile.fileSeparator + fragName);							if (!makeDirectoriesForFragment(fragmentDirPath)){   //make directories for fragment in case they don't already exist								if (progIndicator!=null) progIndicator.goAway();								return false;							}							String sequenceDirPath = StringUtil.cleansePath(fragmentDirPath + MesquiteFile.fileSeparator + sequencesFolder  + MesquiteFile.fileSeparator + seqName); 							newDir = new File(sequenceDirPath);     							try {								boolean setInfoFileInfo=false;								if (!newDir.exists()) {  // then this is our first time encountering this sequence									sequenceCount++;									prepareShellScriptForDirectory(shellScript, postShellScript, statusFilePath, fragmentDirPath, seqName, sequenceDirPath);									if (!StringUtil.blank(fragName))										echoStringToFile("Preparing " + seqName + "  ("+fragName+")", logBuffer);									else 										echoStringToFile("Preparing " + seqName, logBuffer);									numPrepared++;									ChromaseqInfoFile infoFile = new ChromaseqInfoFile();									sampleElement = infoFile.addSample(fullSeqName, sampleCode.getValue());									infoFile.addPhredPhrapOptions(phredOptions, phrapOptions);									infoFile.addChromaseqProcessingOptions( qualThresholdForLowerCase,  processPolymorphisms,  polyThreshold,  truncateMixedEnds,  qualThresholdForTrim,  mixedEndWindow,  mixedEndThreshold);									infoFile.addSampleCodeFile(sampleCodeListPath);									infoFile.addPrimerFile(primerListPath);									String infoFilePath = StringUtil.cleansePath(sequenceDirPath  + MesquiteFile.fileSeparator + ChromaseqUtil.infoFileName); 									infoFile.setFilePath(infoFilePath);									infoFile.setDirectoryPath(sequenceDirPath);									infoFiles.add(infoFile);									echoStringToFile("  infoFile " + infoFile + ",    " + sequenceDirPath, logBuffer);								}								newDir.mkdir(); //make new directory for this sequence								//now copy file to "originals" folder								if (backupOriginals) {									try { 										String pathInOriginalFolder = originalsDirPath + MesquiteFile.fileSeparator + chromFileName;  // path to where original will be stored										File originalFile = new File(pathInOriginalFolder); //										MesquiteFile.copy(cFile, originalFile);									}									catch (IOException e) {										logln( "Can't copy: " + seqName); 									}								}								//now move and rename the original to this sequence's directory								//writeInfoFile(infoFilePath, fullSeqName);																try {									String newFileName = startTokenResult + sampleCode.getValue()+"." + stLouisString.getValue()+primerName+fileExtension;									String newFilePath = sequenceDirPath + MesquiteFile.fileSeparator + newFileName;														File newFile = new File(newFilePath); //									int count=1;									while (newFile.exists()) {										newFileName = startTokenResult + sampleCode.getValue()+"_"+count + "." + stLouisString.getValue()+primerName+fileExtension;										newFilePath = sequenceDirPath + MesquiteFile.fileSeparator + newFileName;										newFile = new File(newFilePath);										count++;									}									if (verbose) 										renameBuffer.append("  " + chromFileName + "  renamed to  " + newFileName + "\n");									fileNameTranslation[0][i] = newFileName;									fileNameTranslation[1][i] = chromFileName;									fileNameTranslation[2][i] = primerName.toString();									fileNameTranslation[3][i] = startTokenResult.getValue();									fileNameTranslation[4][i] = sampleCode.getValue();									ChromaseqInfoFile infoFile = ChromaseqInfoFile.getInfoFile(infoFiles,sequenceDirPath);									echoStringToFile(sampleCode.getValue()+ "  infoFile " + infoFile + ",    " + sequenceDirPath + "    " + chromFileName, logBuffer);									if (infoFile!=null)										infoFile.addChromatogramInfo(sampleElement, chromFileName, newFileName, primerName.toString());									cFile.renameTo(newFile); 								}								catch (SecurityException e) {									logln( "Can't rename: " + seqName);								}							}							catch (SecurityException e) {								logln( "Can't make directory: " + seqName);							}						}					}				}			}			if (infoFiles!=null)				ChromaseqInfoFile.writeInfoFiles(infoFiles);			echoStringToFile("Number of files prepared: " + numPrepared, logBuffer);			if (verbose)				echoStringToFile("\n" + renameBuffer.toString()+"\n", logBuffer);			if (!abort) {				if (runPhredPhrap) {					shellScript.append(ShellScriptUtil.getRemoveCommand(runningFilePath));					shellScript.append(ShellScriptUtil.getRemoveCommand(statusFilePath));				}				progIndicator.spin();				if (shellScript.length()>0){					//note name of file should end in .command for Terminal in OS X to run it; on other OS's we may be able to get the script to run directly from Runtime.exec					String scriptPath = rootDir + MesquiteFile.fileSeparator + "ppscript.bat";					MesquiteFile.putFileContents(scriptPath, shellScript.toString(), true);					if (runPhredPhrap) {						try {							//String scriptPath = StringUtil.protectForUnix(rootDir + MesquiteFile.fileSeparator + "ppscript.command");							ShellScriptUtil.setScriptFileToBeExecutable(scriptPath);							//logln("Request to change permissions of file \"ppscript.bat\" given");							Process proc = ShellScriptUtil.executeScript(scriptPath);							if (proc==null) {								if (progIndicator!=null) progIndicator.goAway();								return false;							}							if (progIndicator!=null)								progIndicator.setTitle("Running Phred & Phrap");							logln("\nExecution of Phred-Phrap command file begun.");							/*On OS X at this point the script operates asyncronously, so if we wanted to immediately go into the post processing we'd have to listen for some file showing up or such							 When runtime.exec runs the script directly, proc.waitFor() can be used to force this thread to hang until the script finishes*/							/* the following does nothing on OS X, but will be useful on other OS's if previous statement executes script directly so as to show processing in log window  							 InputStream stream = proc.getInputStream();							 int c = 0;							 while ((c=stream.read())!=-1){							 log("" + (char)c);							 }							 /**/						}						catch (IOException e){							logln("IOE error: " +  e);							abort =true;						}					}				}			}			if (runPhredPhrap && !abort) {				try {					String oldStatus = "";					int equalStatusCount = 0;					int count=-3;					logln("");					//if (progIndicator!=null) progIndicator.setTotalValue(sequenceCount);					while (MesquiteFile.fileExists(runningFilePath) && !abort){						//if (count>2) {						String status = "";						if (MesquiteFile.fileExists(statusFilePath)) {							status = MesquiteFile.getFileContentsAsString(statusFilePath);						}						if (!StringUtil.blank(status)) {							if (progIndicator!=null) {								if (progIndicator.getTotalValue()==0) {									progIndicator.setTotalValue(sequenceCount);									//progIndicator.repaintBar();								}								progIndicator.setText(status);								String s = StringUtil.getFirstItem(status,".");								int num = MesquiteInteger.fromString(s);								progIndicator.setCurrentValue(num);							}							if (status.equalsIgnoreCase(oldStatus))								equalStatusCount++;							else {								equalStatusCount = 0;								log(status);							}							if (equalStatusCount>25)								logln("There may be a problem: Phred and Phrap do not seem to be actively analyzing files.");							oldStatus = status;						}						else {							log(".");							if (progIndicator!=null) progIndicator.spin();						}						count = 1;						//}						if (progIndicator.isAborted())							abort = true;						Thread.sleep(200);						count++;					}					logln("");					if (abort)						echoStringToFile("Mesquite processing stopped.", logBuffer);					else						echoStringToFile("Phred & Phrap analyses completed.", logBuffer);				}				catch (InterruptedException e){					Thread.currentThread().interrupt();				}				//PostPhrap pPhrap = (PostPhrap)hireEmployee(PostPhrap.class, "Post Phrap Processing");				if (!abort) {					echoStringToFile("Post-Phrap processing begins.", logBuffer);					contigPropertiesFileBuffer = new StringBuffer();					postPhrapOnDirectory( project,appendIfPossible, rootDir);					MesquiteFile.putFileContents(contigPropertiesFilePath, contigPropertiesFileBuffer.toString(), true);				}			}			if (progIndicator!=null)				progIndicator.goAway();			MesquiteFile.putFileContents(rootDir + MesquiteFile.fileSeparator + "phredPhrapLog.txt", logBuffer.toString(), true);			if (project != null) {				//project.getCoordinatorModule().saveFile(project.getHomeFile());				if (originalData != null)					originalData.setDirty(true); //so that user will prompted; seems to be needed for annotations to be saved			}		}		return true;	}	/*.................................................................................................................*/	private void addWindowsHeader(StringBuffer shellScript) {		shellScript.append("REGEDIT /E %Temp%.\\tmp-cygwin.reg \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Cygnus Solutions\\Cygwin\\mounts v2\\/\"> nul\n");		shellScript.append("FOR /F \"tokens=1* delims==\" %%A IN ('TYPE %Temp%.\\tmp-cygwin.reg ^| FIND \"native\"') DO SET CYGWIN_ROOT=%%B> nul\n");		shellScript.append("SET CYGWIN_ROOT=%CYGWIN_ROOT:\"=%> nul\n");		shellScript.append("if exist %Temp%.\\tmp-cygwin.reg del %Temp%.\\tmp-cygwin.reg\n");		shellScript.append("SET PATH=.;%CYGWIN_ROOT%\\bin;%CYGWIN_ROOT%\\opt\\elinos\\bin;%PATH%\n");		shellScript.append("set PHRED_PARAMETER_FILE="+phredParamPath+"\n");	}	int aceFileCount = 0;	boolean processFolderAborted = false;	Vector goodNews = new Vector();	Vector badNews = new Vector();	/*.................................................................................................................*/	public void writeInfoFile(String infoFilePath, String fullName){		StringBuffer infoFileBuffer = new StringBuffer();		infoFileBuffer.append(fullName);  //here write the XML info file 		MesquiteFile.putFileContents(infoFilePath, infoFileBuffer.toString(), true);	}	StringBuffer contigPropertiesFileBuffer;	/*.................................................................................................................*/	public void processAceFileWithContig(MesquiteProject project, String processedAceFilePath, String fragmentDirPath, AceFile ace, SequenceUploader uploader, String geneName, MesquiteString fullName, String baseName, MesquiteString voucherCode) {		ace.setNameTranslation(fileNameTranslation);		log(ace.contigListForLog()+StringUtil.lineEnding());		if (processPolymorphisms)			ace.processPolys();  //creates an additional CO that has polys in it		if (renameContigsInAceFiles)			ace.renameContigs(fullName.toString(), addFragName, geneName);		ace.setLowQualityToLowerCase(qualThresholdForLowerCase); 		ace.writeToPropertiesFile(contigPropertiesFileBuffer, fullName.toString());		if (truncateMixedEnds)			ace.trimMixedEnds(mixedEndThreshold, mixedEndWindow, qualThresholdForTrim, addPhrapFailures);		if (uploadResultsToDatabase && StringUtil.notEmpty(databaseURL)) {			uploader.uploadAceFileToServer(MesquiteXMLToLUtilities.getTOLPageDatabaseURL(databaseURL), ace, processPolymorphisms, qualThresholdForTrim);		}		System.out.println("\n\nfasta file name: " + baseName + " ace file: " + ace);		MesquiteFile.putFileContents(fragmentDirPath  + MesquiteFile.fileSeparator + ChromaseqUtil.processedFastaFolder + MesquiteFile.fileSeparator + baseName+".fas", ace.toFASTAString(processPolymorphisms, qualThresholdForTrim), true);		MesquiteFile.putFileContents(processedAceFilePath, ace.toString(processPolymorphisms), true);		if (project != null) {			ace.importSequence(taxa, data, MesquiteInteger.unassigned, originalData, qualityData, registrationData, singleTaxaBlock, processPolymorphisms, maxChar," contig ", false, voucherCode);		}	}		/*.................................................................................................................*/	public void processAceFileWithoutContig(String processedAceFilePath, AceFile ace, String geneName, MesquiteString fullName, MesquiteString voucherCode) {		ace.processFailedContig(polyThreshold);		ace.setNameTranslation(fileNameTranslation);				if (renameContigsInAceFiles)			ace.renameContigs(fullName.toString(), addFragName, geneName);		ace.setLowQualityToLowerCase(qualThresholdForLowerCase); 		ace.writeToPropertiesFile(contigPropertiesFileBuffer, fullName.toString());		if (truncateMixedEnds)			ace.trimMixedEnds(mixedEndThreshold, mixedEndWindow, qualThresholdForTrim, addPhrapFailures);		MesquiteFile.putFileContents(processedAceFilePath, ace.toString(processPolymorphisms), true);		ace.importSequence(taxa, data, MesquiteInteger.unassigned, originalData, qualityData, registrationData, singleTaxaBlock, processPolymorphisms, maxChar,"", true, voucherCode);	}	/*.................................................................................................................*/	public boolean processAceFileDirectory(MesquiteProject project, boolean appendIfPossible, File directory, String directoryPath, String enclosingDirName, String geneName, String dataFilePath, int level){		boolean addingPhrapFailures = false;		String[] files = directory.list();		String processedAceFilePath = null;		AceFile ace = null;		int currentRead = -1;		if (primerAndSampleCodeInfoFromDatabase)			checkDatabaseSource();		SequenceUploader uploader = new SequenceUploader(databaseURLSource);		MesquiteString fullName = null;		MesquiteString voucherCode = new MesquiteString();		for (int i=0; i<files.length && !processFolderAborted; i++) { // going through the folders and finding the ace files			if (files[i]!=null ) {				String filePath = directoryPath + MesquiteFile.fileSeparator + files[i];				String infoFilePath = directoryPath + MesquiteFile.fileSeparator + ChromaseqUtil.infoFileName;				File cFile = new File(filePath);				if (cFile.exists()) {					if (!cFile.isDirectory()) {						if (files[i].endsWith(".ace")  && !files[i].startsWith(".") && !addingPhrapFailures) {							aceFileCount++;							echoStringToFile("Processing ACE file: " + files[i], logBuffer);							String baseName = files[i].substring(0,files[i].length()-4);  //this is the name of the sequence							processedAceFilePath = directoryPath + MesquiteFile.fileSeparator + baseName+ChromaseqUtil.processedACESuffix+".ace";							ace = new AceFile(filePath,processedAceFilePath, dataFilePath, this, processPolymorphisms, polyThreshold);							ace.setBaseName(baseName);							fullName = new MesquiteString(baseName);							voucherCode = new MesquiteString(baseName);							ChromaseqInfoFile.processInfoFile(infoFilePath, fullName, voucherCode);							String fragmentDirPath = StringUtil.getAllButLastItem(StringUtil.getAllButLastItem(directoryPath,MesquiteFile.fileSeparator ),MesquiteFile.fileSeparator );															ace.setLongSequenceName(fullName.toString());							if (ace.getNumContigs()>=1) {								processAceFileWithContig(project,  processedAceFilePath,  fragmentDirPath,  ace,  uploader,  geneName,  fullName,  baseName, voucherCode);							}							else {								echoStringToFile("   ACE file contains no contigs!", logBuffer); 								badNews.addElement("    (" + geneName + ") -- " + baseName);								if (addPhrapFailures && project !=null) {									addingPhrapFailures = true;									i=0;									ace.createEmptyContigs(MesquiteFile.numFilesEndingWith(directoryPath,files,".phd.1"));  //create an empty contig									if (renameContigsInAceFiles)										ace.renameContigs(fullName.toString(), addFragName, geneName);								}							}							if (!addingPhrapFailures)								ace.dispose();						}						else if (files[i].endsWith(".phd.1") && addingPhrapFailures) {							echoStringToFile("   Importing single-read Phred file "+files[i], logBuffer); 							currentRead++;							ace.addPhdFileAsSingleReadInContig(currentRead, directoryPath, files[i], processPolymorphisms, polyThreshold);						}					}				}			}		}						if (addingPhrapFailures && ace !=null ) {  // have to process AceFile that we have manually made			MesquiteFile.putFileContents(processedAceFilePath, ace.toString(processPolymorphisms), true);			if (project != null){				processAceFileWithoutContig( processedAceFilePath,  ace,  geneName,  fullName, voucherCode);			}			ace.dispose();		}		return false;	}		/*.................................................................................................................*/	public boolean processFolderAfterPhrap(MesquiteProject project, boolean appendIfPossible, File directory, String directoryPath, String enclosingDirName, String geneName, String dataFilePath, int level){		boolean addingPhrapFailures = false;		if (processFolderAborted)			return false;		String[] files = directory.list();		String sequenceName = geneName;		if (level == 1)			sequenceName = directory.getName();		if (level == 1 && project!=null) {			project.virginProject=false;			taxa = null;  //making sure nothing old is remembered accidentally			//getting ready to import; making matrices to be filled			if (appendIfPossible && project != null){				data = (DNAData)project.getCharacterMatrixByReference(null, directory.getName() + " (from Phred/Phrap)");				originalData = (DNAData)project.getCharacterMatrixByReference(null, directory.getName() + " (ORIGINAL from Phred/Phrap)");				qualityData = (ContinuousData)project.getCharacterMatrixByReference(null, "Quality Scores for " + directory.getName()  + " from Phred/Phrap");			//	addedBaseData = (CategoricalData)project.getCharacterMatrixByReference(null, "Bases added for " + directory.getName()  + " from Phred/Phrap");				registrationData = (MeristicData)project.getCharacterMatrixByReference(null, "Registration of " + directory.getName()  + " from Phred/Phrap");//DAVID: if change name here have to change elsewhere				if (originalData != null)					originalData.saveChangeHistory = false;				if (qualityData != null)					qualityData.saveChangeHistory = false;		//		if (addedBaseData != null)		//			addedBaseData.saveChangeHistory = false;				if (data != null){					taxa = data.getTaxa();					data.saveChangeHistory = false;				}			}			if (taxa == null){				if (singleTaxaBlock) {					if (project.getNumberTaxas()>0)						taxa = project.getTaxa(0);					if (taxa == null) {						taxa = project.createTaxaBlock(0);						taxa.setName("Sequences");					}				}				else {					taxa = project.createTaxaBlock(0);					taxa.setName(directory.getName() + " Sequences");				}			}			CharactersManager manageCharacters = (CharactersManager)coord.findElementManager(mesquite.lib.characters.CharacterData.class);			MesquiteString uid = new MesquiteString(ChromaseqUtil.PHPHIMPORTIDREF, MesquiteTrunk.getUniqueIDBase());			MesquiteString gN = new MesquiteString(ChromaseqUtil.GENENAMEREF, directory.getName());			if (data == null){				data =  (DNAData)manageCharacters.newCharacterData(taxa, 0, DNAData.DATATYPENAME);  //				data.saveChangeHistory = false;				data.addToFile(file, project, manageCharacters);  				data.setName(directory.getName() + " (from Phred/Phrap)");				ChromaseqUtil.attachStringToMatrix(data,uid);				ChromaseqUtil.attachStringToMatrix(data,gN);				ChromaseqUtil.attachStringToMatrix(data,new MesquiteString(ChromaseqUtil.PHPHMQVERSIONREF, ChromaseqUtil.PHPHMQVERSION));				ChromaseqUtil.attachStringToMatrix(data,new MesquiteString(ChromaseqUtil.PHPHIMPORTMATRIXTYPEREF, ChromaseqUtil.EDITEDREF));			}			if (originalData == null){				originalData =  (DNAData)manageCharacters.newCharacterData(taxa, 0, DNAData.DATATYPENAME);  //				originalData.saveChangeHistory = false;				originalData.setEditorInhibition(true);				originalData.setUserVisible(ChromaseqUtil.isChromaseqDevelopment());				originalData.addToFile(file, project, manageCharacters);  				originalData.setName(directory.getName() + " (ORIGINAL from Phred/Phrap)");				//data.addToLinkageGroup(originalData); //link matrices!   //DAVID: uncomment this to reverse new registration system				originalData.setResourcePanelIsOpen(false);				ChromaseqUtil.attachStringToMatrix(originalData,uid);				ChromaseqUtil.attachStringToMatrix(originalData,gN);				ChromaseqUtil.attachStringToMatrix(originalData,new MesquiteString(ChromaseqUtil.PHPHIMPORTMATRIXTYPEREF, ChromaseqUtil.ORIGINALREF));				originalData.setLocked(true);			}			if (qualityData == null){				qualityData =  (ContinuousData)manageCharacters.newCharacterData(taxa, 0, ContinuousData.DATATYPENAME);  //				qualityData.saveChangeHistory = false;				qualityData.addToFile(file, project, manageCharacters);  				//data.addToLinkageGroup(qualityData); //link matrices!  //DAVID: uncomment this to reverse new registration system				qualityData.setName("Quality Scores for " + directory.getName()  + " from Phred/Phrap");				qualityData.setResourcePanelIsOpen(false);				qualityData.setUserVisible(ChromaseqUtil.isChromaseqDevelopment());				ChromaseqUtil.attachStringToMatrix(qualityData,uid);				ChromaseqUtil.attachStringToMatrix(qualityData,gN);				ChromaseqUtil.attachStringToMatrix(qualityData,new MesquiteString(ChromaseqUtil.PHPHIMPORTMATRIXTYPEREF, ChromaseqUtil.QUALITYREF));				qualityData.setLocked(true);				qualityData.setUseDiagonalCharacterNames(false);			}/*			if (addedBaseData == null){				addedBaseData =  (CategoricalData)manageCharacters.newCharacterData(taxa, 0, CategoricalData.DATATYPENAME);  //				addedBaseData.addToFile(file, project, manageCharacters);  				addedBaseData.setUserVisible(ChromaseqUtil.isChromaseqDevelopment());//				ChromaseqUtil.setAddedBaseDataValues(addedBaseData, data, directory.getName(), uid, gN);			}*/			if (registrationData == null){				registrationData =  (MeristicData)manageCharacters.newCharacterData(taxa, 0, MeristicData.DATATYPENAME);  //				registrationData.setUserVisible(ChromaseqUtil.isChromaseqDevelopment());				registrationData.addToFile(file, project, manageCharacters);  								ChromaseqUtil.setRegistryDataValues(registrationData,  data, directory.getName() ,  uid,  gN);			}			ChromaseqUtil.setChromaseqRegistrationBuildOfMatrix(data,ChromaseqUtil.ChromaseqRegistrationBuild);			maxChar.setValue(0);						//qualityData.attachIf UniqueName(new MesquiteString(ChromaseqUtil.PHPHIMPORTMATRIXTYPEREF, "quality")); use method in ChromaseqUtil instead					}		String processedAceFilePath = null;		AceFile ace = null;		int currentRead = -1;		if (primerAndSampleCodeInfoFromDatabase)			checkDatabaseSource();		SequenceUploader uploader = new SequenceUploader(databaseURLSource);		MesquiteString fullName = null;		MesquiteString voucherCode = null;		for (int i=0; i<files.length && !processFolderAborted; i++) { // going through the folders and finding the ace files			if (files[i]!=null ) {				String filePath = directoryPath + MesquiteFile.fileSeparator + files[i];				String infoFilePath = directoryPath + MesquiteFile.fileSeparator + ChromaseqUtil.infoFileName;				File cFile = new File(filePath);				if (cFile.exists()) {					if (cFile.isDirectory()) {						processFolderAfterPhrap(project, appendIfPossible, cFile, filePath, directory.getName(), sequenceName, dataFilePath, level+1);						//log(".");					}					else {						if (files[i].endsWith(".ace")  && !files[i].startsWith(".") && !addingPhrapFailures) {							aceFileCount++;							if (progIndicator!=null) {								if (progIndicator.getTotalValue()==0) {									progIndicator.setTotalValue(sequenceCount);									//progIndicator.repaintBar();								}								progIndicator.setText("Processing: " + files[i] + " ("+ geneName+")");								progIndicator.setCurrentValue(aceFileCount);								if (progIndicator.isAborted()) { 									processFolderAborted = true;									return false;								}							}							echoStringToFile("Processing ACE file: " + files[i], logBuffer);							String baseName = files[i].substring(0,files[i].length()-4);  //this is the name of the sequence							processedAceFilePath = directoryPath + MesquiteFile.fileSeparator + baseName+ChromaseqUtil.processedACESuffix+".ace";							ace = new AceFile(filePath,processedAceFilePath, dataFilePath, this, processPolymorphisms, polyThreshold);							ace.setBaseName(baseName);							fullName = new MesquiteString(baseName);							voucherCode = new MesquiteString();							ChromaseqInfoFile.processInfoFile(infoFilePath, fullName, voucherCode);							String fragmentDirPath = StringUtil.getAllButLastItem(StringUtil.getAllButLastItem(directoryPath,MesquiteFile.fileSeparator ),MesquiteFile.fileSeparator );															ace.setLongSequenceName(fullName.toString());							if (ace.getNumContigs()>=1) {								processAceFileWithContig(project,  processedAceFilePath,  fragmentDirPath,  ace,  uploader,  geneName,  fullName,  baseName, voucherCode);								goodNews.addElement("    (" + geneName + ") -- " + fullName);							}							else {								echoStringToFile("   ACE file contains no contigs!", logBuffer); 								badNews.addElement("    (" + geneName + ") -- " + baseName);								if (addPhrapFailures && project !=null) {									addingPhrapFailures = true;									i=0;									ace.createEmptyContigs(MesquiteFile.numFilesEndingWith(directoryPath,files,".phd.1"));  //create an empty contig									if (renameContigsInAceFiles)										ace.renameContigs(fullName.toString(), addFragName, geneName);								}							}							if (!addingPhrapFailures)								ace.dispose();						}						else if (files[i].endsWith(".phd.1") && addingPhrapFailures) {							echoStringToFile("   Importing single-read Phred file "+files[i], logBuffer); 							currentRead++;							ace.addPhdFileAsSingleReadInContig(currentRead, directoryPath, files[i], processPolymorphisms, polyThreshold);						}					}				}			}		}						if (addingPhrapFailures && ace !=null ) {  // have to process AceFile that we have manually made			MesquiteFile.putFileContents(processedAceFilePath, ace.toString(processPolymorphisms), true);			if (project != null){				processAceFileWithoutContig(processedAceFilePath,  ace,  geneName,  fullName, voucherCode);			}			ace.dispose();		}						if (taxa!=null)			taxa.notifyListeners(this, new Notification(PARTS_ADDED));		if (level ==1 && project !=null){ 			//Wayne: cleaning up and showing matrix			if (maxChar.getValue()<data.getNumChars()-1) {				data.deleteCharacters(maxChar.getValue()+1, data.getNumChars()-maxChar.getValue()+1, false);//				addedBaseData.deleteCharacters(maxChar.getValue()+1, addedBaseData.getNumChars()-maxChar.getValue()+1, false);				originalData.deleteCharacters(maxChar.getValue()+1, originalData.getNumChars()-maxChar.getValue()+1, false);				qualityData.deleteCharacters(maxChar.getValue()+1, qualityData.getNumChars()-maxChar.getValue()+1, false);				registrationData.deleteCharacters(maxChar.getValue()+1, registrationData.getNumChars()-maxChar.getValue()+1, false);			}			// creating reverse registry matrices			mesquite.chromaseq.ChromaseqFileCleanup.ChromaseqFileCleanup init = (mesquite.chromaseq.ChromaseqFileCleanup.ChromaseqFileCleanup)findNearestColleagueWithDuty(mesquite.chromaseq.ChromaseqFileCleanup.ChromaseqFileCleanup.class);			if (init !=null) {				init.createReverseRegistryDataIfNeeded(file);			}			/*for (int ic = 0; ic<data.getNumChars(); ic++){			 for (int it=0; it<data.getNumTaxa(); it++){			 originalData.setState(ic, it, data.getState(ic, it));			 }			 }*/			data.showMe();  			DataWindowMaker mb = coord.findCharacterDataEditor(data);			if (mb != null) {				String commands;				if (showBirdsEye)					commands = "getWindow; tell It; setSize 700 400; colorCells  #mesquite.chromaseq.ColorQuality.ColorQuality;  colorRowNames  #mesquite.chromaseq.ColorQuality.ColorQuality;  toggleBirdsEye on;  toggleAutoTaxonNames on; showWindow; endTell;";  				else					commands = "getWindow; tell It; setSize 700 400; colorCells  #mesquite.chromaseq.ColorQuality.ColorQuality;  colorRowNames  #mesquite.chromaseq.ColorQuality.ColorQuality;  showWindow; endTell;";  				Puppeteer p = new Puppeteer(this);				MesquiteInteger pos = new MesquiteInteger(0);				p.execute(mb, commands, pos, "", false);			}			data = null;			originalData = null;			qualityData = null;//			addedBaseData = null;			registrationData = null;		}		return false;	}	/*.................................................................................................................*/	public boolean postPhrapOnDirectory( MesquiteProject project, boolean appendIfPossible, String directoryPath){		if (StringUtil.blank(directoryPath))			return false;		File directory = new File(directoryPath);		if (directory.exists() && directory.isDirectory()) {			logln(" ");			String dataFilePath = null;			if (project != null) {				coord = project.getCoordinatorModule();				file = project.getHomeFile();				file.changeLocation(importedDirectoryPath, importedDirectoryName + ".nex");				dataFilePath = importedDirectoryPath;			}			aceFileCount = 0;			processFolderAborted = false;			if (progIndicator!=null)				progIndicator.setTitle("Processing Phred/Phrap output");			goodNews.removeAllElements();			badNews.removeAllElements();			processFolderAfterPhrap(project, appendIfPossible, directory, directoryPath,"", null, dataFilePath, 0);			logln("");			echoStringToFile("", logBuffer);			echoStringToFile("========================", logBuffer);			echoStringToFile("Phred/Phrap processing report", logBuffer);			echoStringToFile("", logBuffer);			if (goodNews.size()>0){				echoStringToFile("Multi-read sequences obtained from the following genes and samples:", logBuffer);				for (int i=0; i<goodNews.size(); i++)					echoStringToFile("   " + (String)goodNews.elementAt(i), logBuffer);			}			if (badNews.size()>0){				echoStringToFile("Multi-read sequences FAILED to be obtained from the following genes and samples:", logBuffer);				for (int i=0; i<badNews.size(); i++)					echoStringToFile("   " + (String)badNews.elementAt(i), logBuffer);			}			echoStringToFile("========================", logBuffer);			logln("");			logln("Completed.");		}		return false;	}	/*.................................................................................................................*/	public boolean postPhrap(MesquiteProject project){		String directoryPath = MesquiteFile.chooseDirectory("Choose directory containing Phrap files:"); 		logBuffer.setLength(0);		return postPhrapOnDirectory(project, false, directoryPath);	}	/*.................................................................................................................*/	public String getName() {		return "Prepare and Run Phred and Phrap";	}	/*.................................................................................................................*/	public boolean showCitation() {		return false;	}	/*.................................................................................................................*/	public String getExplanation() {		return "Prepares a folder of abi files for Phred and Phrap, and makes a shell script to invoke Phred and Phrap within each folder, and runs the script.";	}	/*.................................................................................................................*/	public  void actionPerformed(ActionEvent e) {		if (e.getActionCommand().equalsIgnoreCase("phLocations")) {			queryFileLocations();		}		else if (e.getActionCommand().equalsIgnoreCase("postOptions")) {			queryPostOptions();		}		else if (e.getActionCommand().equalsIgnoreCase("phBrowse")) {			phredPath = MesquiteFile.chooseDirectory("Choose directory containing phred, phrap, and phd2fasta: ");			if (!StringUtil.blank(phredPath)) {				if (!phredPath.endsWith(MesquiteFile.fileSeparator))					phredPath+=MesquiteFile.fileSeparator;				phredPathField.setText(phredPath);			}		}		else if (e.getActionCommand().equalsIgnoreCase("primerBrowse")) {			MesquiteString primerListDir = new MesquiteString();			MesquiteString primerListFile = new MesquiteString();			String s = MesquiteFile.openFileDialog("Choose file containing primer list", primerListDir, primerListFile);			if (!StringUtil.blank(s)) {				primerListPath = s;				if (primerListField!=null) 					primerListField.setText(primerListPath);			}		}		else if (e.getActionCommand().equalsIgnoreCase("DNANumbersBrowse")) {			MesquiteString dnaNumberListDir = new MesquiteString();			MesquiteString dnaNumberListFile = new MesquiteString();			String s = MesquiteFile.openFileDialog("Choose file containing sample codes and names", dnaNumberListDir, dnaNumberListFile);			if (!StringUtil.blank(s)) {				sampleCodeListPath = s;				if (dnaCodesField!=null) 					dnaCodesField.setText(sampleCodeListPath);			}		}		else if (e.getActionCommand().equalsIgnoreCase("paramBrowse")) {			MesquiteString paramDir = new MesquiteString();			MesquiteString paramFile = new MesquiteString();			phredParamPath = MesquiteFile.openFileDialog("Choose phred parameter file: ", paramDir, paramFile);			if (!StringUtil.blank(phredParamPath)) {				paramPathField.setText(phredParamPath);			}		}	}}