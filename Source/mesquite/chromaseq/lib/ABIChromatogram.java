/* Mesquite chromaseq source code.  Copyright 2005-2008 D. Maddison and W. Maddison.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.chromaseq.lib; //David: document source of this sourceimport java.io.*;import java.util.*;import mesquite.lib.Debugg;public class ABIChromatogram extends StandardChromatogram {	private int traceLength;	public static final int MagicNum = (((((int)'A'<<8)+(int)'B'<<8)+(int)'I'<<8)+(int)'F');	public  ABIChromatogram(InputStream in, Read read) throws IOException {		readChromatogram(in);		this.read = read;	}	private DataInputStream getRecordStream(DataInputStream dataIN, int recordOffset, int recordDataSize) {		try {			byte[] fileBytes = new byte[recordOffset+recordDataSize];			dataIN.readFully(fileBytes,recordOffset,recordDataSize); 			ByteArrayInputStream plainbyteIN = new ByteArrayInputStream(fileBytes);			return new DataInputStream(plainbyteIN);		}		catch (IOException ex) {			String exMessage = ex.getMessage();			String exName = ex.getClass().getName();			System.out.println("IO ERROR: " + exName + " : " + exMessage);			return null;		}	}	public boolean readChromatogram(InputStream in)  throws IOException{		DataInputStream dataIN = new DataInputStream(in);		byte[] fileHeader = new byte[30];		dataIN.readFully(fileHeader);		ByteArrayInputStream hIN = new ByteArrayInputStream(fileHeader);		DataInputStream headerIN = new DataInputStream(hIN);		headerIN.skip(4);  //ABIF		short version = headerIN.readShort();  		int majorVersion = version/100;		if (majorVersion>1) {			System.out.println("Version number of ABI file (" + version +") is not compatible with Chromaseq");			throw new IOException();		}//		6 B in		headerIN.skip(10);		int elementSize =headerIN.readShort();		int numElements = headerIN.readInt();  //number of elements in the directory		int dataSize = headerIN.readInt();		int dataOffset = headerIN.readInt();  //specifies the location of the directory		headerIN.reset();		int bytesReadIn =dataOffset + dataSize; 		byte[] fileBytes = new byte[dataOffset + dataSize];		headerIN.readFully(fileBytes,0,30);   //put 30 bytes into fileBytes, starting at 0		dataIN.readFully(fileBytes,30,fileBytes.length - 30);  //put all but 30 bytes into fileBytes, starting at 30, i.e., just after the header		ByteArrayInputStream plainbyteIN = new ByteArrayInputStream(fileBytes);		DataInputStream byteIN = new DataInputStream(plainbyteIN);		byteIN.mark(0);		byteIN.skip(dataOffset);		// read tagged records into hash table		TaggedRecord[] records = new TaggedRecord[numElements];		Hashtable rHash = new Hashtable(numElements);		int i;		for (i=0;i<numElements;i++) {			records[i] = new TaggedRecord(byteIN);			rHash.put(records[i].getTagName() + records[i].getTagNum(),records[i]);		}		// get base calls		TaggedRecord PBAS1 = (TaggedRecord) (rHash.get("PBAS1"));		int recordOffset = PBAS1.getDataOffset();		int recordDataSize = PBAS1.getDataSize();//		System.out.println("offset: " + Offset);		int recordNumElements = PBAS1.getNumElements();		System.out.println("\n|||||||||||||\nrecordNum " +	numElements + ", dataOffset: " + dataOffset);		System.out.println("PBAS1 Offset (base calls) \n" +	recordOffset + ", elementNum: " + recordNumElements);		byteIN.reset();		byteIN.skip(recordOffset);		base = new char[recordNumElements];		for (i=0;i<recordNumElements;i++) {			base[i] = (char) byteIN.readUnsignedByte();		}		baseSequence = new String(base);		// get base locations		TaggedRecord PLOC1 = (TaggedRecord) (rHash.get("PLOC1"));		long oldOffset = recordOffset;		recordOffset= PLOC1.getDataOffset();		recordDataSize = PLOC1.getDataSize();		recordNumElements = PLOC1.getNumElements();		System.out.println("PLOC1 Offset (base locations) \n" +	recordOffset + ", elementNum: " + recordNumElements);		System.out.println(" newOffset-OldOffset = " +	(recordOffset-oldOffset));		int elementLength = PLOC1.getElementLength();		DataInputStream recordByteIN;		//recordByteIN = getRecordStream(dataIN,recordOffset,recordDataSize );		recordByteIN = byteIN;		if (recordByteIN==null)			return false;		recordByteIN.reset();		recordByteIN.skip(recordOffset);		basePosition = new int[recordNumElements];//		System.out.println("PBAS1 \n" +	PBAS1.toString());//		System.out.println("PLOC1 \n" +	PLOC1.toString());//		System.out.println("elementNum: " + elementNum + ", Offset: " + Offset);		for (i=0;i<recordNumElements;i++) {			try {				if (elementLength==2)					basePosition[i] = (char) recordByteIN.readUnsignedShort();				else					basePosition[i] = (char) recordByteIN.readUnsignedByte();			}			catch (IOException ex) {				String exMessage = ex.getMessage();				String exName = ex.getClass().getName();				System.out.println("IO ERROR: " + exName + " : " + exMessage + ", i: " + i);				break;			}		}		/*		try {			byteIN.readFully(PLOC1.offsetData);		}		catch (IOException ex) {			String exMessage = ex.getMessage();			String exName = ex.getClass().getName();			System.out.println("IO ERROR: " + exName + " : " + exMessage + ", i: " + i);		}		 */			// get FWO (tells which trace is which)		TaggedRecord FWO1 = (TaggedRecord) (rHash.get("FWO_1"));		long packedChar = FWO1.getDataOffset();		//packedChar = Offset;		System.out.println("FWO1 Offset () \n" +	recordOffset);		char[] baseOrder = new char[4];		baseOrder[0] = (char) ( (packedChar >>> 24) & 0xff );  		baseOrder[1] = (char) ( (packedChar >>> 16) & 0xff );		baseOrder[2] = (char) ( (packedChar >>> 8) & 0xff );		baseOrder[3] = (char) ( (packedChar) & 0xff );		// get data records for traces		TaggedRecord[] Trace = new TaggedRecord[4];		traceLength = Integer.MAX_VALUE;		int dataNum;		for (i=0;i<4;i++) {			dataNum = 9 + i;			Trace[i] = (TaggedRecord) (rHash.get("DATA" + dataNum));			if (Trace[i].getNumElements() < traceLength)				traceLength = Trace[i].getNumElements();		}		// using FWO record data as guide, input Trace data		A = new int[traceLength];		C = new int[traceLength];		G = new int[traceLength];		T = new int[traceLength];		for (i=0;i<4;i++) {		//	recordByteIN= getRecordStream(dataIN,Trace[i].getDataOffset(),Trace[i].getDataSize() );			recordByteIN = byteIN;			recordByteIN.reset();			recordByteIN.skip(Trace[i].getDataOffset());			if (recordByteIN==null)				return false;			elementLength = Trace[i].getElementLength();			switch (baseOrder[i]) {			case 'A':				readTraceArray(A,recordByteIN, elementLength);				break;			case 'C':				readTraceArray(C,recordByteIN, elementLength);				break;			case 'G':				readTraceArray(G,recordByteIN, elementLength);				break;			case 'T':				readTraceArray(T,recordByteIN, elementLength);				break;			}		}		return true;	}	private static void readTraceArray(int[] intArray,DataInputStream IN, int elementLength) throws IOException {		int i=0;		try {			if (elementLength==2) {				for (i=0;i<intArray.length;i++) {					intArray[i] = IN.readUnsignedShort();				}			} else if (elementLength==1) {				for (i=0;i<intArray.length;i++) {					intArray[i] = IN.readUnsignedByte();				}			}		}		catch (IOException ex) {			String exMessage = ex.getMessage();			String exName = ex.getClass().getName();			System.out.println("IO ERROR: " + exName + " : " + exMessage + ", i: " + i);		}	}	public void write(OutputStream OUT) {		// writing ABI files more trouble than its worth?	};	public int getTraceLength() {		return traceLength;	}	public String getComments() {		// work on this later		return "";	}}